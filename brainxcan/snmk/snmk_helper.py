import brainxcan.snmk.default_params as default_params
from brainxcan.snmk._snmk_helper import * 

def aggregate_chkpnt(wildcards):
    '''
    aggregate the files generated by checkpoint sbxcan_signif
    '''
    checkpoint_output = checkpoints.sbxcan_signif.get(**wildcards).output[0]
    return expand('{outdir}/{prefix}.{idp_name}.MR_vis.png',
           idp_name=glob_wildcards(os.path.join(checkpoint_output, '{idp_name}.txt')).idp_name)

def check_required_args(config):
    required = ['gwas', 'gwas_pop', 'datadir']
    _check_list_all_in(required, config)

def fill_gwas_col_meta(config):
    '''
    snpid: 'rsid'
    effect_allele: 'effect_allele'
    non_effect_allele: 'non_effect_allele'
    effect_size: 'effect_size'
    effect_size_se: 'standard_error'
    chr: 'chromosome'
    zscore: 'zscore'
    sample_size: 'sample_size'
    allele_frequency: 'frequency'
    '''
    key_map_to_mr = {
        'snpid': 'variant_id',
        'effect_size_se': 'se',
        'allele_frequency': 'af'
    }
    main_cols = ['snpid', 'effect_allele', 'non_effect_allele', 'chr']
    desired_cols_b = [ 
        'effect_size', 'effect_size_se'
    ]
    desired_cols_z = [
        'zscore', 'sample_size', 'allele_frequency'
    ]
    # check main cols
    for k in main_cols:
        if k not in config:
            raise ValueError(f'We require {k} to load GWAS.')
    modes = [ 'bhat', 'zscore' ]
    mode = modes[ _decide_mode(desired_cols_b, desired_cols_z, config) ]
    if mode == 'bhat':
        cols = main_cols + desired_cols_b
    elif mode == 'zscore':
        cols = main_cols + desired_cols_z
    
    bxcan_key_val_pairs = []
    mr_key_val_pairs = []
    for cc in cols:
        bxcan_key_val_pairs.append(f'{}:{}'.format(cc, config[cc]))
        if cc in key_map_to_mr:
            cc_mr = key_map_to_mr[cc]
        else:
            cc_mr = cc
        mr_key_val_pairs.append(f'{}:{}'.format(config[cc], cc_mr))
    return ' '.join(bxcan_key_val_pairs), ','.join(mr_key_val_pairs)

def fill_sbxcan_signif_criteria(config):
    _fill_config_w_default_if_needed(config, default_params.BXCAN_SIGNIF)
    arg = '--pval {} --max_idps {}'.format(
        config['signif_pval'], config['signif_max_idps']
    )
    return arg

def fill_sbxcan_idp_weight(config):
    t1 = _try_to_format(
        config['idp_weights_pattern'],
        OrderedDict(
            ('datadir', config['datadir']), 
            ('idp_type', config['idp_type']),
            ('idp_modality', 't1') 
        )
    ) 
    dmri = _try_to_format(
        config['idp_weights_pattern'],
        OrderedDict(
            ('datadir', config['datadir']), 
            ('idp_type', config['idp_type']),
            ('idp_modality', 'dmri') 
        )
    )     
    cols = [ f'{k}:{v}' for k, v in config['idp_weights_cols'].items() ]
    return cols, t1, dmri  
    
def check_datadir(config):
    if 'datadir' not in config:
        raise ValueError('Need to specify the datadir.')
        
def fill_idp_type(config):
    _try_fill_config(
        config, 'idp_type', 
        default_params.IDP_TYPE[0], default_params.IDP_TYPE[1]
    )

def fill_model_type(config):
    _try_fill_config(
        config, 'model_type', 
        default_params.MODEL_TYPE[0], default_params.MODEL_TYPE[1]
    )

def fill_sbxcan_geno_cov(config):
    files = _try_format_for_list(
        config['geno_cov_pattern'],
        OrderedDict(('datadir', config['datadir'])),
        default_params.CHRS, 'chr_num'
    )
    arg = _try_to_format(
        config['geno_cov_pattern'], 
        OrderedDict(('datadir', config['datadir']))
    )
    return arg, files
    
def fill_patterns(config):
    _try_fill_config(config, 'geno_cov_pattern', default_params.GENO_COV_PATTERN)
    _try_fill_config(config, 'idp_weights_pattern', default_params.IDP_WEIGHTS_PATTERN)
    _try_fill_config(config, 'idp_weights_cols', default_params.IDP_WEIGHTS_COLS)
    _check_desired_wildcards(
        config['geno_cov_pattern'], [ '{chr_num}' ]
    )
    _check_desired_wildcards(
        config['idp_weights_pattern'], [ '{idp_modality}' ]
    )
    _check_list_all_in(
        list(default_params.IDP_WEIGHTS_COLS.keys()),
        config['idp_weights_cols']
    )

def fill_exe(config):
    _try_fill_config(config, 'python_exe', default_params.PYTHON_EXE)
    _try_fill_config(config, 'rscript_exe', default_params.RSCRIPT_EXE)
    _try_fill_config(config, 'plink_exe', default_params.PLINK_EXE)

def fill_ld_clump_yaml(config):
    _try_fill_config(config, 'ld_clump_yaml', default_params.LD_CLUMP_YAML)
    _try_to_format(
        config['ld_clump_yaml'], 
        OrderedDict(('datadir', config['datadir']))
    )
    return config['ld_clump_yaml']

def fill_gwas_idp(config):
    _try_fill_config(config, 'idp_gwas_pattern', default_params.IDP_GWAS_PATTERN)
    _check_desired_wildcards(
        config['idp_gwas_pattern'], 
        [ '{chr_num}', '{idp_code}', '{idp_modality}' ]
    )
    param = _try_to_format(
        config['idp_gwas_pattern'], 
        OrderedDict(
            ('datadir', config['datadir']),
            ('idp_type', config['idp_type']),
            ('chr_num', '[chr_num]')
        )
    )
    files = _try_format_for_list(
        config['geno_cov_pattern'],
        OrderedDict(
            ('datadir', config['datadir'])),
            ('idp_type', config['idp_type'])
        ),
        default_params.CHRS, 'chr_num'
    )
    return param, files

def fill_snp_bim(config):
    _try_fill_config(config, 'idp_gwas_snp_pattern', default_params.IDP_GWAS_SNP_PATTERN)
    _check_desired_wildcards(
        config['idp_gwas_snp_pattern'], [ '{chr_num}' ]
    )
    arg = _try_to_format(
        config['idp_gwas_snp_pattern'], 
        OrderedDict(
            ('datadir', config['datadir']),
            ('chr_num', '[chr_num]')
        )
    )
    files = _try_format_for_list(
        config['geno_cov_pattern'],
        OrderedDict(('datadir', config['datadir'])),
        default_params.CHRS, 'chr_num'
    )
    return arg, files

def fill_mr_ld_panel(config):
    _check_val_in_pool(config['gwas_pop'], default_params.GWAS_POPS)
    _try_fill_config(config, 'mr_ld_panel_pattern', default_params.MR_LD_PANEL_PATTERN)
    arg = _try_to_format(
        config['mr_ld_panel_pattern'], 
        OrderedDict(
            ('datadir', config['datadir']),
            ('gwas_pop', config['gwas_pop'])
        )
    )
    files = _try_format_for_list(
        config['geno_cov_pattern'] + '.{suffix}',
        OrderedDict(
            ('datadir', config['datadir']),
            ('gwas_pop', config['gwas_pop'])
        ),
        ['bed', 'bim', 'fam'], 'suffix'
    )
    return arg, files
