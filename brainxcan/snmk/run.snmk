from brainxcan.snmk.snmk_helper import *

# initialization
check_required_args(config)
check_datadir(config)
fill_idp_type(config)
fill_model_type(config)
fill_patterns(config)
args_col_meta_sbxcan, args_col_meta_mr = fill_gwas_col_meta(config)
args_signif_criteria = fill_sbxcan_signif_criteria(config)
args_idp_cols, idp_weight_t1, idp_weight_dmri = fill_sbxcan_idp_weight(config)
args_geno_cov, geno_cov_files = fill_sbxcan_geno_cov(config)
ld_clump_yaml = fill_ld_clump_yaml(config)
params_gwas_idp, gwas_idp_files = fill_gwas_idp(config)
args_snp_bim, snp_bim_files = fill_snp_bim(config)
args_mr_ld_panel, mr_ld_panel_files = fill_mr_ld_panel(config)
fill_exe(config)

# output files
sbxcan = '{outdir}/{prefix}.sbrainxcan.csv'.format(**config)
sbxcan_vis = [
    '{outdir}/{prefix}.vis_t1.png',
    '{outdir}/{prefix}.vis_dmri.png'
]
mr_vis = [
    '{outdir}/{prefix}.{idp_name}.MR_vis.png', 
    '{outdir}/{prefix}.{idp_name}.MR_sumstats.tsv'
]


rule sbxcan_t1:
    input:
        config['gwas'],
        idp_weight_t1[0],
        geno_cov_files
        idp_weight_t1[1]
    output:
        temp('{outdir}/{prefix}.sbrainxcan_t1.csv')
    shell:
        '{config[python_exe]} \
           {config[brainxcan_path]}/brainxcan/sbxcan/run_sbrainxcan.py \
           --genotype_covariance {args_geno_cov} \
           --gwas {input[0]} {args_col_meta_sbxcan} \
           --idp_weight {input[1]} {args_idp_cols} \
           --output {output[0]}'

rule sbxcan_dmri:
    input:
        config['gwas'],
        idp_weight_dmri[0],
        geno_cov_files,
        idp_weight_dmri[1]
    output:
        temp('{outdir}/{prefix}.sbrainxcan_dmri.csv')
    shell:
        'export PYTHONPATH={config[brainxcan_path]}:$PYTHONPATH; \
        {config[python_exe]} \
           {config[brainxcan_path]}/brainxcan/sbxcan/run_sbrainxcan.py \
           --genotype_covariance {args_geno_cov} \
           --gwas {input[0]} {args_col_meta_sbxcan} \
           --idp_weight {input[1]} {args_idp_cols} \
           --output {output[0]}'

rule sbxcan_merge:
    input:
        '{outdir}/{prefix}.sbrainxcan_dmri.csv',
        '{outdir}/{prefix}.sbrainxcan_t1.csv'
    output:
        '{outdir}/{prefix}.sbrainxcan.csv'
    shell:
        '{config[python_exe]} \
           {config[brainxcan_path]}/brainxcan/snmk/merge_bxcan.py \
           --dmri {input[0]} \
           --t1 {input[1]} \
           --output {output[0]}'

checkpoint sbxcan_signif:
    input:
        '{outdir}/{prefix}.sbrainxcan.csv'
    output:
        directory('{outdir}/{prefix}/tmp_signif')
    shell:
        'mkdir -p {output[0]}; \
         {config[python_exe]} \
           {config[brainxcan_path]}/brainxcan/snmk/grab_signif.py \
           {args_signif_criteria} \
           --sbxcan {input[0]} \
           --outdir {output[0]}'

rule mr:
    input:
        ld = ld_clump_yaml,
        gwas = config['gwas'],
        idp_flag = '{outdir}/{prefix}/tmp_signif/{idp_modality}_{idp_code}.txt',
        idp = gwas_idp_files,
        snp = snp_bim_files
    output:
        '{outdir}/{prefix}.MR.{idp_modality}_{idp_code}.rds'
    params:
        gwas_idp = params_gwas_idp,
    shell:
        'export R_SRC={config[brainxcan_path]}/brainxcan/mr; \
          {config[rscript_exe]} \
          {config[brainxcan_path]}/brainxcan/mr/run_mr_local.R \
          --idp_gwas_pattern {params.gwas_idp} \
          --snp_meta {args_snp_bim} \
          --ld_clump_yaml {input.ld} \
          --gwas_file {input.gwas} \
          --gwas_key_val_pairs {args_col_meta_mr} \
          --plink_exe {config[plink_exe]} \
          --bfile_prefix {args_mr_ld_panel} \
          --output {output[0]}'

rule mr_vis:
    input:
        '{outdir}/{prefix}.MR.{idp_modality}_{idp_code}.rds'
    output:
        '{outdir}/{prefix}.{idp_modality}_{idp_code}.MR_vis.png',
        '{outdir}/{prefix}.{idp_modality}_{idp_code}.MR_sumstats.tsv'
    shell:
        'TODO'

rule sbxcan_vis:
    input:
        '{outdir}/{prefix}.sbrainxcan.csv'
    output:
        '{outdir}/{prefix}.vis_t1.png',
        '{outdir}/{prefix}.vis_dmri.png'
    shell:
        'TODO'

def aggregate_chkpnt(wildcards, config):
    '''
    aggregate the files generated by checkpoint sbxcan_signif
    '''
    checkpoint_output = checkpoints.sbxcan_signif.get(**wildcards, **config).output[0]
    wc_ = glob_wildcards('{outdir}/{prefix}/tmp_signif/{idp_modality}_{idp_code}.txt')
    files = expand(
        os.path.join('{outdir}/{prefix}.{idp_modality}_{idp_code}.MR_vis.png'),
        zip,
        outdir=wc_.outdir,
        prefix=wc_.prefix,
        idp_modality=wc_.idp_modality,
        idp_code=wc_.idp_code
    )
    return files

rule collect_mr:
    input:
        # lambda wildcards: aggregate_chkpnt(wildcards, config)
        aggregate_chkpnt
    output:
        '{outdir}/{prefix}.MR_output.txt'
    shell:
        'ls {input} > {output[0]}'

rule SBrainXcan:
    input:
        sbxcan,
        [ i.format(**config) for i in sbxcan_vis ],
        lambda wildcards: aggregate_chkpnt(wildcards, config)

rule SBrainXcanOnly:
    input:
        sbxcan

rule SBrainXcanAndVis:
    input:
        [ i.format(**config) for i in sbxcan_vis ]

rule SBrainXcanAndMR:
    input:
        sbxcan,
        # '{outdir}/{prefix}.MR_output.txt'.format(**config)
        lambda wildcards: aggregate_chkpnt(wildcards, config)
          
